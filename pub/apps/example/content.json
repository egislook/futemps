{
  "gallery": {
    "album4": {
      "button": {
        "route": "data",
        "title": "Edit Data"
      },
      "description": "Build Flexible and beautiful web applications or sites\nin fashioned and quick way with Poinout.",
      "title": "Meet Poinout,\nFlexible front-end toolkit",
      "img": "/assets/files/file-1505317794052-01.jpg"
    },
    "album3": {
      "img": "/assets/files/file-1505311277785-06.jpg",
      "title": "title for 3rd album"
    },
    "album2": {
      "title": "Flowers here my friend and something a bit more\nSmall title huh? Edit works",
      "img": "/assets/files/file-1505041853636-12.jpg"
    },
    "album1": {
      "title": "sunset here my friend little bit modified\nnew line.",
      "img": "/assets/files/file-1504996813985-10.jpg"
    }
  },
  "testing": {
    "img": "/assets/files/file-1505032316977-20170906_185251.jpg"
  },
  "todo": "Feature: duplicate leaf\nFeature: button text & link edit\nFeature: Language support (dynamic / structure method)\nRefactor: elem-text to wrap-text. Wrapper works with yield. Editability.\nFeature: wrap-image. Wrapper works with yield. Editability.\nFeature: smart data structure / dynamic data \nBug: incorrect ancestors list is generated.\nFeature: move leaf\nFeature: sort leafs\nadd extend colapse feature\nmake experimental todo\n---\nIdea: poinject parent value as variable $ref\n---\n(done) Feature: Gallery slideshow\n(done) add basic image uploading feature\n(done) fix delete bug. deletes only selected value and parent\n(done) add new field on top lvl\n(done) fix delete fn (value delete)",
  "experiment": {
    "field4": {},
    "field3": {},
    "field2": {},
    "field1": {}
  },
  "title": "set new title of the appssssssss",
  "testField": "some value",
  "text": "Note that this will simply add all attributes \nof obj2 to obj1 which might not be what you want if you still want to use the unmodified obj1. If you're using a framework that craps all over your prototypes then you have to get fancier with checks like hasOwnProperty, but that code will work for 99% of casessss.ss ggggssss",
  "text2": "Careful: the variable \"settings\" will be modified, though. jQuery doesn't return a new instance.The reason for this (and for the naming) is that .extend() was developed to extend objects, rather than to munge stuff together. If you want a new object (e.g. settings is defaults you don't want to touch), you can always jQuery.extend({}, settings, options)",
  "poinoutTitle": "Poinout",
  "meta": {
    "title": "poinout | main page",
    "description": "small app example",
    "image": "image.png",
    "author": "noneedsystem",
    "favicon": "favicon.png",
    "url": "www.poinout.com"
  },
  "routes": {
    "main": {
      "name": "main",
      "link": "/",
      "title": "poinout",
      "view": "page-main",
      "meta": {
        "title": "poinout | main page",
        "description": "Lets call it TODO"
      }
    },
    "data": {
      "name": "data",
      "link": "/data",
      "title": "Data",
      "view": "page-data",
      "meta": {
        "title": "Poinject tree editor",
        "description": "Poinject Editor is a web-based tool to view, edit, and format Poinject. By editing data you are editing content on the website directly.\nThis example demonstrates the following:\n\nLoading external schemas via ajax (using $ref)\nSetting the editor's value from javascript (try the Restore to Default button)\nValidating the editor's contents (try setting name to an empty string)\nMacro templates (try changing the city or state fields and watch the citystate field update automatically)\nEnabling and disabling editor fields"
      }
    },
    "palette": {
      "name": "palette",
      "link": "/palette",
      "title": "Palette",
      "view": "page-palette",
      "meta": {
        "title": "Poinout color palette",
        "description": "This color palette comprises primary and accent colors that can be used for illustration or to develop your brand colors. Theyâ€™ve been designed to work harmoniously with each other. The color palette starts with primary colors and fills in the spectrum to create a complete and usable palette for Android, Web, and iOS. Google suggests using the 500 colors as the primary colors in your app and the other colors as accents colors.\n\nThemes enable consistent app styling through surface shades, shadow depth, and ink opacity."
      }
    }
  }
}